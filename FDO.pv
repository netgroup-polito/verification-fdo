(* FIDO FDO - version 1.1 *)

(* Instead of the reseller, we have now attacker. Device accepts both an OV with 2 entries and 3 entries *)

free ch:channel. 			(* Public channel *)
free ch_dev_man:channel [private].	(* Private channel between the Device and the Manufacturer*)

type pkey.
type skey.
type result.
type G.

const g:G.

const DI_AppStart:bitstring.
const DI_SetCredentials:bitstring.
const DI_SetHmac:bitstring.
const DI_Done:bitstring.
const TO0_Hello:bitstring.
const TO0_HelloAck:bitstring.
const TO0_OwnerSign:bitstring.
const TO0_AcceptOwner:bitstring.
const TO1_HelloRV:bitstring.
const TO1_HelloRVAck:bitstring.
const TO1_ProveToRV:bitstring.
const TO1_RVRedirect:bitstring.
const TO1_ErrorMessage:bitstring.
const TO2_HelloDevice:bitstring.
const TO2_ProveOVHdr:bitstring.
const TO2_GetOVNextEntry:bitstring.
const TO2_OVNextEntry:bitstring.
const TO2_ProveDevice:bitstring.

const null:bitstring.

table DB(bitstring, bitstring, bitstring, bitstring).

(* Asymmetric signature *)
fun pk(skey):pkey.
fun ok():result.
fun sign(bitstring, skey):bitstring.
reduc forall m:bitstring, sk:skey; checksign(sign(m, sk), m, pk(sk)) = ok().

(* Certificates *)
fun cert(pkey, skey):bitstring [private].
reduc forall pubkey:pkey, sk:skey; checkcert(cert(pubkey, sk), pk(sk)) = ok().
reduc forall pubkey:pkey, sk:skey; getpk(cert(pubkey, sk)) = pubkey.

(* Symmetric encryption *)
fun senc(bitstring, bitstring):bitstring.
reduc forall m:bitstring, shk:bitstring; sdec(senc(m, shk), shk) = m.

(* Hash function *)
fun hash(bitstring):bitstring.
fun hashKey(pkey):bitstring.

(* Key derivation function *)
fun KDF(G):bitstring.

(* HMAC *)
fun hmac(bitstring, bitstring):bitstring.

(* Diffie-Helmann Exponential function *)
fun exp(G, bitstring): G.
equation forall x:bitstring, y:bitstring; exp(exp(g, x), y) = exp(exp(g, y), x).


(* EVENTS *)
event EndProtocol().
event EndDI().
event EndTO0(bitstring, bitstring, bitstring, bitstring).
event EndTO1(bitstring).
event EndTO2().
event OwnershipTransferredOwner(bitstring, bitstring).
event OwnerReceivedOV(bitstring).
event AttackerReceivedOV(bitstring).

event Here().


(* QUERIES *)
free testsecret:bitstring [private].
free testsecret2:bitstring [private].
free attGuid:bitstring.

(*
query attacker(testsecret).
 *)

query attacker(testsecret2).

(*
noninterf testsecret.
weaksecret testsecret.
query event(EndDI()).
query event(Here()).
query prevOV:bitstring, newOV:bitstring; event(OwnershipTransferredOwner(prevOV, newOV)).
query OV:bitstring; event(OwnerReceivedOV(OV)).
query guid:bitstring, to1d:bitstring, to1dSignature:bitstring, OV:bitstring; event(EndTO0(guid, to1d, to1dSignature, OV)).
query ownerip:bitstring; event(EndTO1(ownerip)).
query event(EndTO2()).
query event(EndProtocol()).
*)





let Device_TO2_2entries(devsk:skey, eASigInfo:bitstring, OVGuid:bitstring, ownerip:bitstring, to1d:bitstring, 
				to1dSignature:bitstring, devsecret:bitstring, hashmanpk:bitstring) = 

	(* --- TO2 - Transfer Ownership Protocol 2 --- *)
	
	(* Device sends the Hello message *)
	new NonceTO2ProveOV:bitstring;	
	let to2hello = (OVGuid, NonceTO2ProveOV, eASigInfo) in
	
	out(ch, (TO2_HelloDevice, ownerip, to2hello));
	
	(* Device receives ovheader *)
	in(ch, (=TO2_ProveOVHdr, proveovhdr:bitstring));
	
	let (TO2ProveOVHdrPayload:bitstring, TO2ProveOVHdrPayloadSignature:bitstring, TO2ProveOVHdrUnprotectedHeaders:bitstring) = proveovhdr in
	let (TO2OVHeader:bitstring, TO2OVHeaderHMAC:bitstring, =NonceTO2ProveOV, eBSigInfo':bitstring, xAKeyExchange:G, helloDeviceHash:bitstring) = TO2ProveOVHdrPayload in
	let (TO2OVGuid:bitstring, TO2OVRVInfo:bitstring, TO2OVDeviceInfo:bitstring, TO2OVPublicKey:pkey, TO2OVDevCertChainHash:bitstring) = TO2OVHeader in
	let (NonceTO2ProveDEV:bitstring, CUPHOwnerPubKey:pkey) = TO2ProveOVHdrUnprotectedHeaders in
	
	(* Device verifies TO2ProveOVHdrPayloadSignature using CUPHOwnerPubKey *)
	if checksign(TO2ProveOVHdrPayloadSignature, TO2ProveOVHdrPayload, CUPHOwnerPubKey) = ok() then
	
	(* Device verifies signature on to1d *)
	if checksign(to1dSignature, to1d, CUPHOwnerPubKey) = ok() then
	
	(* Device verifies hash previous message *)
	if helloDeviceHash = hash(to2hello) then
	
	(* Device verifies hmac on header *)
	if hmac(TO2OVHeader, devsecret) = TO2OVHeaderHMAC then
	
	(* Device requests the OVEntry *)
	out(ch, (TO2_GetOVNextEntry, ownerip));
	
	(* Device receives the OVEntries *)
	in(ch, (=TO2_OVNextEntry, OVEntry1:bitstring, OVEntry2:bitstring));
	
	(* Internal verification of the OV *)
	
	let (OVEntryPayload1:bitstring, OVEntrySignature1:bitstring) = OVEntry1 in
	let (OVEntryPayload2:bitstring, OVEntrySignature2:bitstring) = OVEntry2 in
	
	let (OVEHashPrevEntry1:bitstring, OVEHashHdrInfo1:bitstring, OVEPubKey1:pkey) = OVEntryPayload1 in
	let (OVEHashPrevEntry2:bitstring, OVEHashHdrInfo2:bitstring, OVEPubKey2:pkey) = OVEntryPayload2 in
	
	(* Device verifies signatures on OVEntries *)
	if checksign(OVEntrySignature1, OVEntryPayload1, TO2OVPublicKey) = ok() then
	if checksign(OVEntrySignature2, OVEntryPayload2, OVEPubKey1) = ok() then

	if OVEHashHdrInfo1 = hash((TO2OVGuid, TO2OVDeviceInfo)) then
	if OVEHashHdrInfo2 = hash((TO2OVGuid, TO2OVDeviceInfo)) then

	if hash((TO2OVHeader, TO2OVHeaderHMAC)) = OVEHashPrevEntry1 then
	if hash(OVEntryPayload1) = OVEHashPrevEntry2 then
	
	
	if OVEPubKey2 = CUPHOwnerPubKey then
	if hashKey(TO2OVPublicKey) = hashmanpk then
	
	(* OWNER AUTHENTICATION SUCCEEDED *)
	
	new xBKey:bitstring;
	let xBKeyExchange = exp(g, xBKey) in
	let TO2ProveDevicePayload = (NonceTO2ProveDEV, xBKeyExchange) in
	let TO2ProveDevicePayloadSignature = sign(TO2ProveDevicePayload, devsk) in

	let sharedKeyExp = exp(xAKeyExchange, xBKey) in
	let sharedKey = KDF(sharedKeyExp) in
	
	let testenc = senc(testsecret, sharedKey) in

	let provedevice = (TO2_ProveDevice,  TO2ProveDevicePayload, TO2ProveDevicePayloadSignature, testenc) in
	
	out(ch, provedevice)
.

let Device_TO2_3entries(devsk:skey, eASigInfo:bitstring, OVGuid:bitstring, ownerip:bitstring, to1d:bitstring, 
				to1dSignature:bitstring, devsecret:bitstring, hashmanpk:bitstring) = 

	(* --- TO2 - Transfer Ownership Protocol 2 --- *)
	
	(* Device sends the Hello message *)
	new NonceTO2ProveOV:bitstring;	
	let to2hello = (OVGuid, NonceTO2ProveOV, eASigInfo) in
	
	out(ch, (TO2_HelloDevice, ownerip, to2hello));
	
	(* Device receives ovheader *)
	in(ch, (=TO2_ProveOVHdr, proveovhdr:bitstring));
	
	let (TO2ProveOVHdrPayload:bitstring, TO2ProveOVHdrPayloadSignature:bitstring, TO2ProveOVHdrUnprotectedHeaders:bitstring) = proveovhdr in
	let (TO2OVHeader:bitstring, TO2OVHeaderHMAC:bitstring, =NonceTO2ProveOV, eBSigInfo':bitstring, xAKeyExchange:G, helloDeviceHash:bitstring) = TO2ProveOVHdrPayload in
	let (TO2OVGuid:bitstring, TO2OVRVInfo:bitstring, TO2OVDeviceInfo:bitstring, TO2OVPublicKey:pkey, TO2OVDevCertChainHash:bitstring) = TO2OVHeader in
	let (NonceTO2ProveDEV:bitstring, CUPHOwnerPubKey:pkey) = TO2ProveOVHdrUnprotectedHeaders in
	
	(* Device verifies TO2ProveOVHdrPayloadSignature using CUPHOwnerPubKey *)
	if checksign(TO2ProveOVHdrPayloadSignature, TO2ProveOVHdrPayload, CUPHOwnerPubKey) = ok() then
	
	(* Device verifies signature on to1d *)
	if checksign(to1dSignature, to1d, CUPHOwnerPubKey) = ok() then
	
	(* Device verifies hash previous message *)
	if helloDeviceHash = hash(to2hello) then
	
	(* Device verifies hmac on header *)
	if hmac(TO2OVHeader, devsecret) = TO2OVHeaderHMAC then
	
	(* Device requests the OVEntry *)
	out(ch, (TO2_GetOVNextEntry, ownerip));
	
	(* Device receives the OVEntries *)
	in(ch, (=TO2_OVNextEntry, OVEntry1:bitstring, OVEntry2:bitstring, OVEntry3:bitstring));
	
	(* Internal verification of the OV *)
	
	let (OVEntryPayload1:bitstring, OVEntrySignature1:bitstring) = OVEntry1 in
	let (OVEntryPayload2:bitstring, OVEntrySignature2:bitstring) = OVEntry2 in
	let (OVEntryPayload3:bitstring, OVEntrySignature3:bitstring) = OVEntry3 in
	
	let (OVEHashPrevEntry1:bitstring, OVEHashHdrInfo1:bitstring, OVEPubKey1:pkey) = OVEntryPayload1 in
	let (OVEHashPrevEntry2:bitstring, OVEHashHdrInfo2:bitstring, OVEPubKey2:pkey) = OVEntryPayload2 in
	let (OVEHashPrevEntry3:bitstring, OVEHashHdrInfo3:bitstring, OVEPubKey3:pkey) = OVEntryPayload3 in
	
	(* Device verifies signatures on OVEntries *)
	if checksign(OVEntrySignature1, OVEntryPayload1, TO2OVPublicKey) = ok() then
	if checksign(OVEntrySignature2, OVEntryPayload2, OVEPubKey1) = ok() then
	if checksign(OVEntrySignature3, OVEntryPayload3, OVEPubKey2) = ok() then
	
	if OVEHashHdrInfo1 = hash((TO2OVGuid, TO2OVDeviceInfo)) then
	if OVEHashHdrInfo2 = hash((TO2OVGuid, TO2OVDeviceInfo)) then
	if OVEHashHdrInfo3 = hash((TO2OVGuid, TO2OVDeviceInfo)) then
	
	if hash((TO2OVHeader, TO2OVHeaderHMAC)) = OVEHashPrevEntry1 then
	if hash(OVEntryPayload1) = OVEHashPrevEntry2 then
	if hash(OVEntryPayload2) = OVEHashPrevEntry3 then
	
	if OVEPubKey3 = CUPHOwnerPubKey then
	if hashKey(TO2OVPublicKey) = hashmanpk then
	
	(* OWNER AUTHENTICATION SUCCEEDED *)
		
	new xBKey:bitstring;
	let xBKeyExchange = exp(g, xBKey) in
	let TO2ProveDevicePayload = (NonceTO2ProveDEV, xBKeyExchange) in
	let TO2ProveDevicePayloadSignature = sign(TO2ProveDevicePayload, devsk) in

	let sharedKeyExp = exp(xAKeyExchange, xBKey) in
	let sharedKey = KDF(sharedKeyExp) in
	
	let testenc = senc(testsecret, sharedKey) in

	let provedevice = (TO2_ProveDevice,  TO2ProveDevicePayload, TO2ProveDevicePayloadSignature, testenc) in
	
	out(ch, provedevice)
.

let Device_DI_TO1(devsk:skey) = 

	(* --- DI: DEVICE INITIALIZE PROTOCOL --- *)
	out(ch_dev_man, DI_AppStart);

	in(ch_dev_man, response:bitstring);
	let (=DI_SetCredentials, OVHeader:bitstring) = response in
	
	let (OVGuid:bitstring, OVRVInfo:bitstring, OVDeviceInfo:bitstring, OVPublicKey:pkey, OVDevCertChainHash:bitstring) = OVHeader in
	let hashmanpk = hashKey(OVPublicKey) in

	new devsecret:bitstring;
	let HeaderHMAC = hmac(OVHeader, devsecret) in

	out(ch_dev_man, (DI_SetHmac, HeaderHMAC));
	
	
	(* --- TO1 - Transfer Ownership Protocol 1 --- *)
	
	(* Device seTO2_ProveOVHdrnds the Hello message *)
	new eASigInfo:bitstring;
	let hello = (TO1_HelloRV, OVRVInfo, (OVGuid, eASigInfo)) in
	out(ch, hello);
	
	(* Device receives the Hello Ack from RV *)
	in(ch, helloack:bitstring);
	
	let (=TO1_HelloRVAck, NonceTO1Proof:bitstring, eBSigInfo:bitstring) = helloack in
	
	(* Device signs the nonce *)
	let NonceTO1ProofSignature = sign((NonceTO1Proof, OVGuid), devsk) in 
	
	out(ch, (TO1_ProveToRV, OVRVInfo, NonceTO1ProofSignature));
	
	(* Device receives the blob from the RV *)
	in(ch, rvredirect:bitstring);
	
	let (=TO1_RVRedirect, to1d:bitstring, to1dSignature:bitstring) = rvredirect in
	let (ownerip:bitstring, to1dTo0dHash:bitstring) = to1d in
	
	(* DEVICE NOW HAS THE IP ADDRESS OF THE OWNER *)
	event EndTO1(ownerip);
	
	(Device_TO2_3entries(devsk, eASigInfo, OVGuid, ownerip, to1d, to1dSignature, devsecret, hashmanpk)
	|
	Device_TO2_2entries(devsk, eASigInfo, OVGuid, ownerip, to1d, to1dSignature, devsecret, hashmanpk) )
		
.


let Owner(ownersk:skey, ownerip:bitstring, capk:pkey) =

	(* Owner receives the OV *)
	in(ch, OV:bitstring);

	let (OVHeader:bitstring, OVHeaderHMAC:bitstring, OVDevCertChain:bitstring, OVEntry1:bitstring, OVEntry2:bitstring, OVEntry3:bitstring) = OV in
	let (OVGuid:bitstring, OVRVInfo:bitstring, OVDeviceInfo:bitstring, OVPublicKey:pkey, OVDevCertChainHash:bitstring) = OVHeader in
	
	(* Owner verifies OVDevCertChain *)
	if checkcert(OVDevCertChain, capk) = ok() then
	if OVDevCertChainHash = hash(OVDevCertChain) then

	(* Internal verification of the OV *)
	let (OVEntryPayload1:bitstring, OVEntrySignature1:bitstring) = OVEntry1 in
	let (OVEntryPayload2:bitstring, OVEntrySignature2:bitstring) = OVEntry2 in
	let (OVEntryPayload3:bitstring, OVEntrySignature3:bitstring) = OVEntry3 in
	
	let (OVEHashPrevEntry1:bitstring, OVEHashHdrInfo1:bitstring, OVEPubKey1:pkey) = OVEntryPayload1 in
	let (OVEHashPrevEntry2:bitstring, OVEHashHdrInfo2:bitstring, OVEPubKey2:pkey) = OVEntryPayload2 in
	let (OVEHashPrevEntry3:bitstring, OVEHashHdrInfo3:bitstring, OVEPubKey3:pkey) = OVEntryPayload3 in

	if OVEHashHdrInfo1 = hash((OVGuid, OVDeviceInfo)) then
	if OVEHashHdrInfo2 = hash((OVGuid, OVDeviceInfo)) then
	if OVEHashHdrInfo3 = hash((OVGuid, OVDeviceInfo)) then
	
	if checksign(OVEntrySignature1, OVEntryPayload1, OVPublicKey) = ok() then
	if checksign(OVEntrySignature2, OVEntryPayload2, OVEPubKey1) = ok() then
	if checksign(OVEntrySignature3, OVEntryPayload3, OVEPubKey2) = ok() then
	
	if hash((OVHeader, OVHeaderHMAC)) = OVEHashPrevEntry1 then
	if hash(OVEntryPayload1) = OVEHashPrevEntry2 then
	if hash(OVEntryPayload2) = OVEHashPrevEntry3 then
	
	(* Owner verifies OVPubKey1 is the same key in the OVHeader *)
	if OVEPubKey1 = OVPublicKey then
	(* Owner verifies OVPubKey in the last Entry is its own public key *)
	if OVEPubKey3 = pk(ownersk) then
	
	event OwnerReceivedOV(OV);
	
	(* --- TO0 - Transfer Ownership Protocol 0 --- *)
	
	(* Owner sends the Hello message *)
	let hello = (TO0_Hello, OVRVInfo) in
	out(ch, hello);
	
	in(ch, helloack:bitstring);
	let (=TO0_HelloAck, NonceTO0Sign:bitstring) = helloack in
	
	let to0d = (OV, NonceTO0Sign) in
	let to1dTo0dHash = hash(to0d) in
	let to1d = (ownerip, to1dTo0dHash) in
	
	let to1dSignature = sign(to1d, ownersk) in
	
	(* Owner sends OwnerSign *)
	out(ch, (TO0_OwnerSign, to0d, to1d, to1dSignature));
	
	(* --- TO2 - Transfer Ownership Protocol 2 --- *)
	
	in(ch, to2start:bitstring);
	
	let (=TO2_HelloDevice, =ownerip, to2hello:bitstring) = to2start in
	let (=OVGuid, NonceTO2ProveOV:bitstring, eASigInfo:bitstring) = to2hello in
	
	new eBSigInfo:bitstring;
	new xAKey:bitstring;
	let xAKeyExchange = exp(g, xAKey) in
	let helloDeviceHash = hash(to2hello) in
	let TO2ProveOVHdrPayload = (OVHeader, OVHeaderHMAC, NonceTO2ProveOV, eBSigInfo, xAKeyExchange, helloDeviceHash) in
	let TO2ProveOVHdrPayloadSignature = sign(TO2ProveOVHdrPayload, ownersk) in
	
	new NonceTO2ProveDEV:bitstring;
	let CUPHOwnerPubKey = pk(ownersk) in
	let TO2ProveOVHdrUnprotectedHeaders = (NonceTO2ProveDEV, CUPHOwnerPubKey) in
	
	let proveovhdr = (TO2ProveOVHdrPayload, TO2ProveOVHdrPayloadSignature, TO2ProveOVHdrUnprotectedHeaders) in
	
	out(ch, (TO2_ProveOVHdr, proveovhdr));
	
	in(ch, (=TO2_GetOVNextEntry, =ownerip));
	
	(* Owner sends the OVEntries *)
	out(ch, (TO2_OVNextEntry, OVEntry1, OVEntry2, OVEntry3));
	
	in(ch, (=TO2_ProveDevice, TO2ProveDevicePayload:bitstring, TO2ProveDevicePayloadSignature:bitstring, testenc:bitstring));
	
	let (=NonceTO2ProveDEV, xBKeyExchange:G) = TO2ProveDevicePayload in
	
	(* Owner verifies the OV cert chain ... already done above *)
	(* Owner verifies the signature on NonceTO2ProveDEV *)
	let devpk = getpk(OVDevCertChain) in
	if checksign(TO2ProveDevicePayloadSignature, TO2ProveDevicePayload, devpk) = ok() then
	
	(* DEVICE AUTHENTICATION SUCCEEDED *)
	event EndTO2();
	
	let sharedKeyExp = exp(xBKeyExchange, xAKey) in
	let sharedKey = KDF(sharedKeyExp) in
	
	if sdec(testenc, sharedKey) = testsecret then
	
	out(ch, senc(testsecret2, sharedKey));
	
	(* PROTOCOL COMPLETED *)
	event EndProtocol()
.	

let ManufacturingStation(mansk:skey, devCertChain:bitstring, serverip:bitstring, respk:pkey) =
	
	(* --- DI: DEVICE INITIALIZE PROTOCOL --- *)
	in(ch_dev_man, command:bitstring);
	if command = DI_AppStart then

	(* Create the OVHeader *)
	new OVGuid:bitstring;
	let OVRVInfo = serverip in
	new OVDeviceInfo:bitstring;
	let OVPublicKey = pk(mansk) in
	let OVDevCertChainHash = hash(devCertChain) in

	let OVHeader = (OVGuid, OVRVInfo, OVDeviceInfo, OVPublicKey, OVDevCertChainHash) in
	out(ch_dev_man, (DI_SetCredentials, OVHeader));
	
	in(ch_dev_man, response:bitstring);
	let (=DI_SetHmac, HeaderHMAC:bitstring) = response in
	
	out(ch_dev_man, DI_Done);
	
	event EndDI();
	
	(* Create the OV and send it to Device Reseller *)
	
	let OVHeaderHMAC = HeaderHMAC in
	let OVDevCertChain = devCertChain in
	
	let OVEHashPrevEntry = hash((OVHeader, OVHeaderHMAC)) in
	let OVEHashHdrInfo = hash((OVGuid, OVDeviceInfo)) in
	let OVEPubKey = OVPublicKey in

	let OVEntryPayload = (OVEHashPrevEntry, OVEHashHdrInfo, OVEPubKey) in
	let OVEntry = (OVEntryPayload, sign(OVEntryPayload, mansk)) in
	
	(* Extend the Ownership Voucher for the Reseller *)
	let OVEHashPrevEntry' = hash(OVEntryPayload) in
	let OVEHashHdrInfo' = hash((OVGuid, OVDeviceInfo)) in
	let OVEPubKey' = respk in
	let OVEntryPayload' = (OVEHashPrevEntry', OVEHashHdrInfo', OVEPubKey') in
	let OVEntry' = (OVEntryPayload', sign(OVEntryPayload', mansk)) in
	
	let OV = (OVHeader, OVHeaderHMAC, OVDevCertChain, OVEntry, OVEntry') in
	
	out(ch, OV)	
. 

let RendevouzServerRegisterOwner(serverip:bitstring, manpk:pkey, capk:pkey)  =
	
	(* --- TO0 - Transfer Ownership Protocol 0 --- *)
	
	(* Server receives the Hello TO1_HelloRVAckrequest *)
	in(ch, to0request:bitstring);
	let (=TO0_Hello, =serverip) = to0request in
	
	(* Server creates and sends nonce to sign *)
	new NonceTO0Sign:bitstring;
	out(ch, (TO0_HelloAck, NonceTO0Sign));

	(* Server receives the respondse from the Owner *)
	in(ch, ownersign:bitstring);
	
	let (=TO0_OwnerSign, to0d:bitstring, to1d:bitstring, to1dSignature:bitstring) = ownersign in 
	
	let (OV:bitstring, =NonceTO0Sign) = to0d in
	let (ownerip:bitstring, to1dTo0dHash:bitstring) = to1d in
	
	if to1dTo0dHash = hash(to0d) then
	
	(* OV Verification *)
	
	let (OVHeader:bitstring, OVHeaderHMAC:bitstring, OVDevCertChain:bitstring, OVEntry1:bitstring, OVEntry2:bitstring, OVEntry3:bitstring) = OV in
	let (OVGuid:bitstring, OVRVInfo:bitstring, OVDeviceInfo:bitstring, OVPublicKey:pkey, OVDevCertChainHash:bitstring) = OVHeader in
	
	(* Server verifies OVDevCertChain *)
	if checkcert(OVDevCertChain, capk) = ok() then
	if OVDevCertChainHash = hash(OVDevCertChain) then 
	
	(* Internal verification of the OV *)
	let (OVEntryPayload1:bitstring, OVEntrySignature1:bitstring) = OVEntry1 in
	let (OVEntryPayload2:bitstring, OVEntrySignature2:bitstring) = OVEntry2 in
	let (OVEntryPayload3:bitstring, OVEntrySignature3:bitstring) = OVEntry3 in
	
	let (OVEHashPrevEntry1:bitstring, OVEHashHdrInfo1:bitstring, OVEPubKey1:pkey) = OVEntryPayload1 in
	let (OVEHashPrevEntry2:bitstring, OVEHashHdrInfo2:bitstring, OVEPubKey2:pkey) = OVEntryPayload2 in
	let (OVEHashPrevEntry3:bitstring, OVEHashHdrInfo3:bitstring, OVEPubKey3:pkey) = OVEntryPayload3 in

	if OVEHashHdrInfo1 = hash((OVGuid, OVDeviceInfo)) then
	if OVEHashHdrInfo2 = hash((OVGuid, OVDeviceInfo)) then
	if OVEHashHdrInfo3 = hash((OVGuid, OVDeviceInfo)) then
	
	if checksign(OVEntrySignature1, OVEntryPayload1, OVPublicKey) = ok() then
	if checksign(OVEntrySignature2, OVEntryPayload2, OVEPubKey1) = ok() then
	if checksign(OVEntrySignature3, OVEntryPayload3, OVEPubKey2) = ok() then
	
	if hash((OVHeader, OVHeaderHMAC)) = OVEHashPrevEntry1 then
	if hash(OVEntryPayload1) = OVEHashPrevEntry2 then
	if hash(OVEntryPayload2) = OVEHashPrevEntry3 then
	
	(* Server trusts the pubkey in the OVHeader *)
	if OVPublicKey = manpk then
	if OVEPubKey1 = OVPublicKey then
	
	(* Server verifies the signature on the nonce *)
	if checksign(to1dSignature, to1d, OVEPubKey3) = ok() then
	
	(* OWNER AUTHENTICATION SUCCEEDED *)
	
	(* Save the correspondance in the table *)
	insert DB(OVGuid, to1d, to1dSignature, OV);
	
	out(ch, TO0_AcceptOwner);
	
	event EndTO0(OVGuid, to1d, to1dSignature, OV)	
.


let RendevouzServerReplyToDevice(serverip:bitstring, manpk:pkey, capk:pkey) = 

	(* --- TO1 - Transfer Ownership Protocol 1 --- *)

	(* Server receives the Hello TO1_HelloRVAckrequest *)
	in(ch, to1request:bitstring);
	let (=TO1_HelloRV, =serverip, payload:bitstring) = to1request in
	
	let (OVGuid:bitstring, eASigInfo:bitstring) = payload in
	
	(* Retrieve the entry saved in the DB *)
	get DB(=OVGuid, to1d:bitstring, to1dSignature:bitstring, OV:bitstring) in 
	
	new NonceTO1Proof:bitstring;
	new eBSigInfo:bitstring;
	
	out(ch, (TO1_HelloRVAck, NonceTO1Proof, eBSigInfo));
	
	(* Receive the signature *)
	in(ch, signresp:bitstring);
	
	let (=TO1_ProveToRV, =serverip, NonceTO1ProofSignature:bitstring) = signresp in
	
	let (OVHeader:bitstring, OVHeaderHMAC:bitstring, OVDevCertChain:bitstring, OVEntry1:bitstring, OVEntry2:bitstring, OVEntry3:bitstring) = OV in
	let devpk = getpk(OVDevCertChain) in
	
	(* Verify the signature *)
	if checksign(NonceTO1ProofSignature, (NonceTO1Proof, OVGuid), devpk) = ok() then
	
	(* DEVICE AUTHENTICATION SUCCEEDED *)
	
	(* Return to1d object + signature to the device *)
	out(ch, (TO1_RVRedirect, to1d, to1dSignature))
	
	
	(*
	} else {
	    out(ch, TO1_ErrorMessage); 	
	} 
	*) 
.


let SellDeviceToOwner(ownerpk:pkey, ressk:skey) = 

	(* Reseller sells the device to the Owner *)

	in(ch, OV:bitstring);
	
	let (OVHeader:bitstring, OVHeaderHMAC:bitstring, OVDevCertChain:bitstring, OVEntry1:bitstring, OVEntry2:bitstring) = OV in
	let (OVGuid:bitstring, OVRVInfo:bitstring, OVDeviceInfo:bitstring, OVPublicKey:pkey, OVDevCertChainHash:bitstring) = OVHeader in
	
	(* OV INTERNAL VERIFICATION *)
	let (OVEntryPayload1:bitstring, OVEntrySignature1:bitstring) = OVEntry1 in
	let (OVEntryPayload2:bitstring, OVEntrySignature2:bitstring) = OVEntry2 in
	
	let (OVEHashPrevEntry1:bitstring, OVEHashHdrInfo1:bitstring, OVEPubKey1:pkey) = OVEntryPayload1 in
	let (OVEHashPrevEntry2:bitstring, OVEHashHdrInfo2:bitstring, OVEPubKey2:pkey) = OVEntryPayload2 in

	if OVEHashHdrInfo1 = hash((OVGuid, OVDeviceInfo)) then
	if OVEHashHdrInfo2 = hash((OVGuid, OVDeviceInfo)) then
	
	if checksign(OVEntrySignature1, OVEntryPayload1, OVPublicKey) = ok() then
	if checksign(OVEntrySignature2, OVEntryPayload2, OVEPubKey1) = ok() then
	
	if hash((OVHeader, OVHeaderHMAC)) = OVEHashPrevEntry1 then
	if hash(OVEntryPayload1) = OVEHashPrevEntry2 then
	
	(* Add OVEntry *)
	let OVEHashPrevEntry' = hash(OVEntryPayload2) in
	let OVEHashHdrInfo' = hash((OVGuid, OVDeviceInfo)) in
	let OVEPubKey' = ownerpk in
	
	let OVEntryPayload' = (OVEHashPrevEntry', OVEHashHdrInfo', OVEPubKey') in
	let OVEntry' = (OVEntryPayload', sign(OVEntryPayload', ressk)) in

	let OV' = (OVHeader, OVHeaderHMAC, OVDevCertChain, OVEntry1, OVEntry2, OVEntry') in

	out(ch, OV');
	
	event OwnershipTransferredOwner(OV, OV')
.





	

process
	(* Create CA (trusted entity) *)
	new cask:skey;
	let capk = pk(cask) in
	out(ch, capk);
	
	(* Create device *)
	new devsk:skey;
	let devpk = pk(devsk) in
	(* Certify device public key *)
	let devCertChain = cert(devpk, cask) in 

	(* Create the Rendevouz Server *)
	new serverip:bitstring;

	(* Create Manufacturer *)
	new mansk:skey;
	let manpk = pk(mansk) in
	out(ch, manpk);
	
	(* Create Reseller *)
	new ressk:skey;
	let respk = pk(ressk) in
	out(ch, respk);

	(* Create owner *)
	new ownersk:skey;
	let ownerpk = pk(ownersk) in
	new ownerip:bitstring;
	
	(* Create attacker *)
	new attsk:skey;
	let attpk = pk(attsk) in
	let attCertChain = cert(attpk, cask) in 
	out(ch, (attsk, attCertChain));

	Device_DI_TO1(devsk) | ManufacturingStation(mansk, devCertChain, serverip, attpk) | SellDeviceToOwner(ownerpk, attsk) 
	| Owner(ownersk, ownerip, capk) | !RendevouzServerRegisterOwner(serverip, manpk, capk) | !RendevouzServerReplyToDevice(serverip, manpk, capk)
	
	
	

	

